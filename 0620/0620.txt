[[0620]]

-------------------------------------------------------------------------------

뷰 프레임워크로 PWA 만들기
D:/pwa-project

1. PWA by VueJS 만들기
    node.js & Vue-CLI 설치
        npm install -g @vue/cli

    serve, firebase 설치
        npm install -g serve  //npm run serve(vue 명령어), serve dist(build한 파일 보는 명령어)에 필요해! serve 설치
        npm install -g firebase-tools

        npm run build : 빌드 명령 실행                 //http://localhost:8080/
        serve dist : dist폴더의 index.html 실행        //http://localhost:3000/
            콘솔에서 명령어 실행 안 되는 경우 명령어 .cmd 추가
            serve dist 에러 시 serve.cmd dist

        npx : 일회용 설치도구(프로젝트 끝날때까지~)
        npm : 지속 사용, node package manager.. (=yarn)
    
        *firebase : 종합적인 도구(아마존이 만든 AWS를 구글이 다시 만들어..)
            명령어= deploy
    cd []
    npm install
    npm run serve

    
    (프로그램 빌드하고 테스트)
        빌드:
            - 실행에 필요한 모든 파일(html, css, js, img..)을 정적(static) 파일로 만드는 과정 (웹상에서 실제로 사용할 수 있는 파일형태로 만들어줘)
            - 브라우저가 읽을 수 있는 자바스크립트 파일 /dist 폴더에 생성

        빌드 명령 실행 : npm run build
        dist폴더의 index.html 실행 : serve dist 

    





2. 프로젝트 제작
    목적
        - 처음부터 끝까지 직접 만들어 보기
        - 개발 전체 과정 익히기

    실습
        - 기본환경 설정
            node.js, Vue-CLI
        - 프로젝트 폴더생성 및 옵션 설정
        - 테스트 및 컴포넌트 설치
        - 매니페스트 작성
        - index.html 수정
        - App.vue 수정
        - 테스트 및 실행

    순ㅅㅓ
        1/ vue create pwa-project
        2/ [babel], [pwa]
        3/ ...
            /*
            npm run serve : npm 명령어
            serve : build된 파일 미리보기
            */





3. 워크박스로 오프라인 관리
    (워크박스?)
        - 구글에서 제공하는 워크박스는 웹앱의 '오프라인 기능을 지원'하는 오픈소스 기반의 자바스크립트 라이브러리
        - Vue-CLI3 부터는 워크박스를 기본으로 포함
        - 반복적인 것은 자동화하고 상황에 따라 캐시를 손쉽게 사용할 수 있도록 많은 기능을 제공하여 편리성 제공
        - 예: 스타벅스, 핀터레스트, WIRED, Forbes

    (워크박스의 3가지 캐시 전략 이해하기)
        (캐시 전략)
        1/ Cache First
            (방법)
            - 캐시먼저 사용 -> 캐시에 없으면 그 때 온라인 사용
            (용도)
            - 캐시가 유용한 폰트, 이미지처럼 '바뀔 가능성이 작을 때'
            (대상)
            - 폰트, 이미지

        2/ Stale while revalidate
            (방법)
            - 캐시먼저 사용 -> 캐시 내용이 변경되면 온라인에 접속해 변경된 것으로 교체
            (용도)
            - 캐시가 유용하지만 사용자가 '가끔씩 변경'할 때
            (대상)
            - 아바타 이미지, CSS, JS

        3/ Network First
            (방법)
            - 온라인에 먼저 접속해서 사용 -> 오프라인일 때 캐시 사용
            (용도)
            - '인터넷 기사'처럼 항상 '최신 내용'이 중요할 때
            (대상)
            - HTTP 요청 URL


    F12
        console: 워크박스 캐시내용 확인
        application: (Cache Storage에서) 상세 내용 확인




-----------------------------------------------------------------------------------

4. 파이어베이스 호스팅에 HTTPS로 PWA배포 (=AWS)
    (파이어베이스?)
        - 실전에 사용 가능한 높은 품질의 모바일 앱과 웹앱을 쉽고 빠르게 개발할 수 있도록 서버단에서 필요한 다양한 기능을 클라우드 서비스로 지원하는 구글의 통합 플랫폼
        ex/ 실시간 데이터베이스, 오픈 인증, 스토리지, 호스팅, 푸시 알림 서비스, 광고, 분석 등

        http://firebase.google.com/

    (가격 정책)
        - spark 요금제 : 무료
        - 사용 데이터가 일정 기준 이상 늘어나면 : 유료
        - 스타트업 기업처럼 비용을 아끼면서 초기에 테스트 서버 플랫폼이 필요할 때 유용

    (무료 프로젝트)
        - 구글 계정 당 10개 생성 가능
        - 삭제해도 생성 개수 추가되지 않음

    (순서)
        firebase login 
            : 구글계정으로 로그인
        firebase init : 파이어베이스 초기화
        Are you ready to proceed? Y
        Hosting : ~ Github~
        Use an existing project
        my-project-5e5b2 (my-project)
        public directory? dist!!!!!
        spa? n
        github? n / github올리고 싶으면 Y
        overwrite? 무조건!!!! N!!!!!!!!!!!
        Firebase initialization complete! 준비끝~

        // 코드 수정사항 있다면 npm run build 다시 해야해

        npm run build : 배포파일 생성
        firebase deploy : 파이어베이스에 업로드
        Ctrl + Hosting URL: https://my-project-5e5b2.web.app click!
        https://my-project-5e5b2.web.app/ 짜잔!!!!

        // 코드 수정 시 
            npm run build 
            firebase deploy 
        이 과정을 반복





5. PWA 성능 테스트하기
    (테스트방법?)
        - 웹 성능, 웹 접근성, SEO..
        - 웹앱 매니페스트, HTTPS 같은 PWA 서비스 요건을 평가에 집중

    1/라이트하우스 =크롬 확장 기능의 프로그램 (F12에 있어!!!!)
        - 웹앱 성능을 분석하는 오픈소스 자동화 도구
        - 웹 사이트의 일반적인 성능과 PWA의 기능을 평가한 후 최고의 성능을 내기 위한 방법 분석 및 보완 목적

        // SPA는 SEO에 약하다?! MPA는 반대(SEO는 훨씬 유리)!

    2/ 크롬 개발자 도구의 라이트하우스 (->2차 프로젝트 발표할 때 발표자료에 첨부하면 굳!!!)





--------------------------------------------------------------------------------------------------

1. To Do 앱
    (제작목적)
        - 할 일을 새로 만들고(create), 할 일을 읽어 오고(read), 수정하고(update), 삭제(delete)하는 기능 구현





2. 설치
        vue add vuetify
        preset : default  //vite = jquery같이 좀 더 쉽게 사용할 수 있게 도와주는..
        npm install firebase vuefire@next  // 최신버전 뷰파이어 설치





3. 뷰파이어
    (뷰파이어?)
        - 뷰와 파이어베이스를 연결하여 손쉬운 코드만으로 실시간 데이터 기반의 동적인 웹 UI를 빠르게 렌더링할 수 있도록 해주는 최적의 파이어베이스 데이터바인딩 라이브러리
        - 파이어베이스를 이용해서 최신 웹 애플리케이션의 데이터 관리의 CRUD(create, read, update, delete)를 쉽고 빠르게 작업하도록 도와주는 솔루션





4. 워크박스로 오프라인 관리하기
    (뷰를 통해서 생성된 PWA 템플릿)
        - 워크박스를 사용해 캐시를 체계적으로 관리
        - 자동으로 index.htlm, css, txt 캐시

    (직접 원하는 파일만 캐시해야 할 상황 발생 시)
        - 워크박스 플러그인 모드 활용

    4-1/ 워크박스 플러그인 모드
        (워크박스가 제공하는 방식)
            - 서비스 워커 파일은 자동 생성 시, 작성한 로직을 서비스 워커에 추가할지 아니면 직접 코드를 함께 포함시킬지를 설정으로 결정
                ex/ 
                GenerateSW : 자동으로 생성되는 서비스 워커에 워크박스 옵션 지정
                InjectManifest : 서비스 워커에 자신의 코드를 직접 넣어 최종 서비스 워커 파일 생성

            - /src에서 개발  -오프라인 기능 빌드(workbox)->  webpack  -빌드->  /dist 배포파일 행성

        (캐시 종류)
            - 프리캐시(pre-cache) : 실행 전에 미리 지정
            - 런타임 캐시(runtime-cache) : 프로그램이 실행 중에 원하는 부분만 지정

        (캐시 플러그인 모드)
            - GenerateSW : 프리 캐시, 런타임 캐시를 간단한 설정값으로 처리
            - InjectManifest : 직접 캐시 정책과 프로그램 로직 추가




5. 파이어베이스 실시간 DB 준비하기
    (CRUD?)
        - Create, Read, Update, Delete
        - 데이터베이스의 기초 기능
    
    (CRUD 간편구현)
        - 파이어베이스에서 쉽게 구현할 수 있도록 뷰파이어를 적용

        new project! : to-do
        build > realtime database, firestore database !
            realtime database -> 데이터베이스 만들기
            프로젝트개요 설정 -> 프로젝트 설정 -> apikey, databaseurl 확인 가능
        
        파이어베이스 데이터소스 준비 (src/datasources/firebase.js)