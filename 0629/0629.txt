[[0629]]
{ v-for, computed / map, filter / watch, watchEffect }


    - cd Vue3
    - npm init vite new-project
    - cd vue-project
    - npm install 
    - npm run dev


        /// 
            ref()
                : import {ref} from 'vue'
                : 변수 선언, ref()로 감싸
                : 변수값 변경 할 때, '변수.value'에 변경할 값 넣기
                
                -> 타입제한X, 템플릿에서 단일 변수로 사용 가능
            reactive()
                : import {reactive} from 'vue'
                : 변수 선언, reactive()로 감싸
                : property값 변경 할 때, '변수.property'에 변경할 값 넣기
                : object, array, Map, Set 이외에는 사용X

                -> 자바스크립트와 템플릿 사이에 일관성이 있음
                    반응형 변수 많이 선언할 때 간단히 사용 가능
                    (.. Vue2의 data()와 비슷)


----------------------------------------------------------------------------------------------------


반복문

    (v-for)
        - 동일한 문장 또는 '규칙'을 가지는 문장을 반복하는 경우에 사용
        - 배열, 객체, 데이터베이스 등 '많은 데이터를 가지고 있는 변수'의 값을 출력할 때 용이
        - 자바스크립트의 loop를 이용해 HTML 태그를 포함한 문자열을 반환하고 해당 문자열을 v-html 디렉티브로 표현 가능
            
            v-for="값 in 배열"
            v-for="(값,인덱스) in 배열"

            v-for="값 in 객체"
            v-for="(값, 키) in 객체"
            v-for="(값, 키, 인덱스) in 객체"
        
        - 'key 속성과 같이 사용'하는 것이 좋음
        - '변수를 반응성'으로 만들기 위해 프록시 객체를 생성하는 'ref를 사용'하지만 '배열이나 객체는 reactive 함수 사용'

    (computed)
        - 반응형 애플리케이션 구현의 중요한 기능 중 하나
        - ref, reactive, watcher는 실시간으로 데이터의 변경을 감시하지만 computed는 원하는 대로 데이터를 변경
        - 간단한 데이터의 조작은 v-if, v-for 등으로 비슷하게 구현 가능하지만 'computed는 복잡한 연산이나 기능의 구현' 가능
        - 호출이 되면 반드시 새롭게 계산을 진행하고 DOM을 업데이트하는 함수와는 다르게 내부 반응성 변수의 값이 변하지 않으면 결과를 캐시에서 가져와 사용하며 DOM에 업데이트 하지 않음
        - Options APi - computed 속성 사용
          Composition API - Vue 패키지에서 computed 컴포지션 API 호출하여 사용


    (map() 메서드?)
            /// 전체데이터 다 가져와서 사용(조건문으로 원하는 것만 추출 가능?!)
        - 배열 내의 모든 요소를 돌면서 주어진 함수의 결과를 모아(=가공) 새로운 배열을 리턴
        - 결과를 'return'으로 추출
        - 실행문이 한 개만 반환될 경우, return 키워드와 {}를 생략 가능
            const a = numbers.map(number => {
                return number < 3
            })
                =>
                // 리팩토링(간결한 코드)
                const a = numbers.map(number => number < 3)

    (filter() 메서드?)
            /// 일부데이터(원하는 것만) 추출해서 가능
        - 배열 내의 모든 요소를 돌면서 주어진 '함수의 조건에 맞는 요소만을 모아 새로운 배열을 리턴'

            let newArray = arr.filter(callback(currentValue[, index, [array]]){
                // return element for newArray, if true
            }[, thisArg]);

                currentValue : 배열 내 현재 값
                index : 배열 내 현재 값의 인덱스
                array : 현재 배열
                thisArg : callbackFunction 내에서 this로 사용될 값




----------------------------------------------------------------------------------------------------


Watch, WatchEffect

    (Watch, WatchEffect?)
        - '데이터의 변화를 감지'하여 사용자가 지정한 콜백함수를 호출

    (Watch?)
            /// 변화가 생길때마다 추적 -> 과하게 감시해...
            /// 콜백함수 : 인자 2개 ?? function(바뀐값, 이전값)
            /// const와 비슷 -> 값이 객체형식이면 값 바뀐것 인식못해..
        - 지정된 '특정 변수의 감시'
        - 값이 '변경되기 이전 값 참조'
        - 같은 컴포넌트를 reload 할 때 props의 처음 값이 중요한 경우 immediate 옵션을 true로 설정하면 처음 값 사용 가능
            /// 기본값은 immediate:false
        - 여러 변수를 동시에 감시하고자 하는 경우 watch의 처음 인자를 배열로 정의
        - 배열의 값이 변경되면 배열 순서대로 변경된 값을 콜백함수에 배열 형태로 전달
        - 감시하고자 하는 값이 객체나 리스트인 경우에는 deep옵션을 true로 설정
        - computed 속성을 사용하는 경우 watch는 잘 사용하지 않음

    (WatchEffect?)
        - Vue3에서 추가된 API
        - 변수의 초기 변경 값부터 모두 감시
        - 어떤 값이 변경되었는지 알려주지 않으므로 '이전 값 참조 불가'
        - 불필요한 변수를 감시하지 않기 위해 모든 변수의 대입값을 감시한 이후에는 콜백함수에서 참조되는 변수만 감시
        - 반환함수를 이용하여 '감시 중단 가능'
        - 콜백함수 호출 시기를 정의하기 위해 'flush' 옵션 사용
            _pre : 기본값, DOM 업데이트 전에 콜백함수 호출 ///beforeUpdate??
            _post : DOM 업데이트 이후 콜백함수 호출


----------------------------------------------------------------------------------------------------


컴포넌트 생성

    (컴포넌트?)
        - 하나의 커다란 애플리케이션을 작은 요소로 분해해 은닉화
        - '재사용성' 향상
        - 하나의 애플리케이션은 createApp 함수를 이용해 생성된 Vue 애플리케이션 인스턴스 참조
            import {createApp} from 'vue'
            const app = createApp({ /*인스턴스 옵션*/ })

    (?? 메서드)
        component
        config

    (애플리케이션 인스턴스 메서드)
        : 애플리케이션의 모든 컴포넌트가 사용할 수 있는 전역 변수로 선언됨
            - directive : 전역 사용자 디렉티브 설정
            - mixin: 전역에서 사용할 수 있는 mixin 설정
            - mount : 최상위 컴포넌트를 특정 DOM 엘리먼트에 장착
            - provide : 모든 자식 컴포넌트가 주입(inject)할 수 있는 값을 제공
            - Unmount : 특정 DOM 엘리먼트 내 애플리케이션 인스턴스를 분리
            - use : Vue 플로그인 객체를 사용할 수 있도록 설정 