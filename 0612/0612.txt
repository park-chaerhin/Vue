Vue.js

1. 복잡한 로직과 computed 속성
    (copmuted 속성)
        - 머스태시를 이용해 HTML 엘리먼트값이 어떻게 변경되는지 살펴보면서 필요한 연산 작업을 도움





2. 이벤트 핸들러 로직과 method 속성
    (methods 속성)
        - 이벤트 핸들러를 사용해 마우스 클릭과 같은 이벤트가 발생했을 때 실행되는 로직에 활용
        - 메서드는 뷰 인스턴스에 포함해 사용하는 함수를 의미

    (computed 속성과 methods 속성의 차이점)
        - computed 속성
            : 머스태시에 작성할 로직이 복잡하면 함수로 정의할 때
            : 계산량이 많아 캐시가 필요할 때

        - methods 속성
            : 뷰의 이벤트 핸들러 로직을 함수로 정의할 때 ex/ <button v-on:click='fnChangeTitle'> CLICK </button>

                data: 단순한 값 / method: 복잡한 값(이벤트핸들러) / computed: 함수?





3. 컴포넌트로 HTML 엘리먼트 만들기
    (컴포넌트란?)
        - 뷰의 중요한 특징 중 하나이며 HTML의 기본 엘리먼트 외에 자신만의 엘리먼트를 만들어 쓰는 모듈을 의미
        - 미리 만든 컴포넌트 이름을 가지고 여는 태그(<>)와 닫는 태그(</>)에 적용해 사용
            (작게~): '새로 만들어쓰는 태그'
            (일반적): '하나의 섹션' 
                -> header를 'my_header'로 저장해놓고 필요할 때 마다 그 부분에 태그처럼 사용해서 불러옴
                    (재사용성 높아, 수정편리) = javascript : include
                -> cdn 방식 : 태그 불러지면 실행할 수 있도록 load이벤트 필요 : function
        
            - 컴포넌트의 data속성은 반드시 함수로 정의
            - 템플릿(template)은 화면에 표시할 엘리먼트 구조를 정의

    (템플릿이란?)
        - 새로운 엘리먼트처럼 사용할 수 있도록 컴포넌트를 등록할 때 HTML과 뷰 코드로 작성된 소스를 의미

    (템플릿 속성)
        - 컴포넌트 안에서 화면에 표시될 부분을 처리하는 속성
        - HTML, CSS, 자바스크립트를 적용하여 표시될 내용의 구조와 표현, 사용자와의 상호작용 기능을 구현
        - 백틱(`) 키를 사용하여 문자열을 선언하면 줄바꿈이 있어도 HTML 문서로 자동으로 인식





4. 컴포넌트 속성 props
    (컴포넌트 속성 props)
        - 컴포넌트에서 전달되는 어트리뷰트의 값으로써, 문자열이나 객체의 배열 형식을 사용
            HTML : <elem  attr = 'value'>
            COMPONENT : <comp_name  props = 'value'>

    (컴포넌트 장점)
        - HTML의 일반 엘리먼트처럼 사용할 수 있기 때문에 기능을 무한대로 확장할 수 있는 잠재력
        - 다양한 주제별로 그에 맞는 엘리먼트를 설계하여 사용
        - 컴팩트한 개발이 가능하므로 유지보수 관점에서도 편리





5. 상태 관리와 Vuex
    (Vuex란?)
        - 뷰의 코어 중 상태 관리를 위한 패턴 & 라이브러리
        - 하나의 뷰 또는 복수의 화면 사이에서 여러 개의 컴포넌트를 사용하게 되면 각 '컴포넌트 간에 상태값 전달이나 공유'
            **(컴포넌트 간 공유할 수 있는 데이터 관리)
        - localStorage에 저장되지 않고 메모리에 저장되므로 새로고침 시 데이터 초기화
        - 상태를 새로고침 하더라도 데이터를 유지하기 위해서는 별도의 라이브러리 필요

    (Vuex의 작동원리 이해하기)
        - State, Mutations, Getters, Actions 4개의 속성

    (상태 관리와 Vuex)
        - State
            : 공유한 상태값 데이터 정의
        - Mutations
            : setter의 의미, 외부에서 동기 방식으로 저장할 때 사용
        - Getters
            : state의 데이터 값을 외부에서 읽어 올 때 사용
        - Actions
            : 외부의 API 실행 같은 비동기 실행을 관리할 때 사용
